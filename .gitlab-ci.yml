# Copyright 2021 Felix Bertoni
#
# SPDX-License-Identifier: MIT

stages:
  - test
  - docs
  - relcheck
  - publish

image: carterjones/manjaro

include:
  - template: Code-Quality.gitlab-ci.yml

## PREPARING IMAGES ##

.build_dev_dependencies:
  before_script:
    - sudo pacman --noconfirm -Syu
    - sudo pacman --noconfirm -S clang make cmake llvm
    - git submodule update --init --recursive

.build_rel_dependencies:
  before_script:
    - sudo pacman --noconfirm -Syu
    - sudo pacman --noconfirm -S make cmake gcc
    - git submodule update --init --recursive

.doc_dependencies:
  before_script:
    - sudo pacman --noconfirm -Syu
    - sudo pacman --noconfirm -S doxygen graphviz

## RULES ##

.rules_all:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run in merge request pipelines
    - if: '$CI_COMMIT_BRANCH == "stable"' # Run n pipelines on the stable branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run in pipelines for tags

.rules_all_but_stable:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run in merge request pipelines
    - if: "$CI_COMMIT_TAG" # Run in pipelines for tags

.rules_stable_only:
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"' # Run n pipelines on the stable branch (but not in other branch pipelines)

## JOBS ##

code_quality:
  variables:
    REPORT_FORMAT: html
  artifacts:
    #to be able to DL as artifact
    paths: [gl-code-quality-report.html]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run in merge request pipelines
    - if: '$CI_COMMIT_BRANCH == "stable"' # Run n pipelines on the stable branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run in pipelines for tags

test:
  extends:
    - .build_dev_dependencies
    - .rules_all
  stage: test
  script:
    - mkdir build
    - cd build
    - cmake .. -DENABLE_LLVM_COVERAGE=ON -DENABLE_GDB=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Debug
    - make
    - make test

coverage:
  extends:
    - .build_dev_dependencies
    - .rules_all
  stage: test
  script:
    - mkdir build
    - cd build
    - cmake .. -DENABLE_LLVM_COVERAGE=ON -DENABLE_GDB=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Debug
    - make
    - make test
    - make coverage_all_txt
    - echo "coverage" "$(tail llvmcoverage/coverage_all.txt -n 1 | grep -o "[0-9]*.[0-9]*%" | head -n 1)"

install:
  extends:
    - .build_rel_dependencies
    - .rules_all
  stage: test
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --target fatigue
    # installing
    - sudo cmake --build . --target install
    # preparing tests
    - cd ../tests/install
    - mkdir build
    - cd build
    - cmake ..
    - cmake --build .
    - cmake --build . --target test

doc:
  extends:
    - .doc_dependencies
    - .rules_all_but_stable
  stage: docs
  script:
    - mkdir build
    - mkdir build/docgen
    - doxygen Doxyfile
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run in merge request pipelines
    - if: "$CI_COMMIT_TAG" # Run in pipelines for tags

licenses:
  extends:
    - .rules_stable_only
  stage: relcheck
  before_script:
    - sudo pip3 install fsfe-reuse
  script:
    - 'reuse lint | grep "Congratulations! Your project is compliant with version 3.0 of the REUSE Specification"'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run in merge request pipelines
    - if: "$CI_COMMIT_TAG" # Run in pipelines for tags

pages:
  extends:
    - .doc_dependencies
    - .rules_stable_only
  stage: publish
  script:
    - mkdir build
    - mkdir build/docgen
    - doxygen Doxyfile
    - mkdir public
    - mv build/docgen/html/ public/
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "stable"' # Run in pipelines on the stable branch (but not in other branch pipelines)
