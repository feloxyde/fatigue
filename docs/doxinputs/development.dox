// Copyright 2021 Felix Bertoni
//
// SPDX-License-Identifier: MIT

/** \page development Development

This page is addressed to developers who want to contribute to or fork fatigue, and presents coding and documentation conventions, as well as tools to build in debug mode and other important aspects of development. 

Please note that this page assumes you already read the both @ref tutorial Tutorial and @ref architecture Architecture pages. 

Following guidelines are meant to be adapted to accomodate constraints that contributors may face, especially disabilities, which makes it hard or impossible for them to follow one or more aspects of the guidelines. Please try to be explicit about such constraints in your contributions activities, and we as a community will try our best to help you. 

On another hand, if you intend ton contribute, keep in mind that as fatigue is a testing framework, it tries to enforce high reliability, and thus extensive testing and rigorous development practices, so you have to be ready for criticizm of your code, and eventual rejection of your contributions.

Also, please read the code of conduct, ```CodeOfConduct.md```, if not already done.

\tableofcontents{html}

@section development_environement Environment 

In order to build the program for development, you will likely need : 

- **clang** or **clang++** as compiler to compile with clang coverage
- **llvm-profdata** to process raw coverage files
- **llvm-cov** to generate report
- **llvm-cxxflit** to demangle names, especially templates ones
- **codechecker** : [https://github.com/Ericsson/codechecker](https://github.com/Ericsson/codechecker), for static quality analysis
- **cppcheck** : [http://cppcheck.sourceforge.net/](http://cppcheck.sourceforge.net/)

@subsection environment_debug Debug build 

Building project for debug is quite straightfoward : simply invoke CMake with build type set as ```Debug```. 
 
~~~
cmake .. -DCMAKE_BUILD_TYPE=Debug
~~~

@subsection environment_coverage Test coverage analysis

To gather coverage informations, project requires a rebuild with coverage flags enabled. It also **requires** clang to be chosen as compiler. Please note that build type shall be debug as well

~~~
cmake .. -DENABLE_LLVM_COVERAGE=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug
~~~

Test registration is performed through ```LLVMCoverage.cmake``` library provided by ```cmake_llvm_coverage``` submodule. A readme file within in the submodule explains how it works.

Once project is rebuilt, run all tests using ```test``` or ```testo``` target. It should create a ```llvmcoverage``` directory in the current build directory, with ```.profraw``` files in it corresponding to each test. 

Finally, there are two coverage targets you can run to get coverage report : 

~~~
make coverage_all_txt
OR 
make coverage_all_html
~~~

Respectively building a text summary ```coverage_all.txt``` and a detailed html report ```coverage_all.html``` in ```llvmcoverage``` directory. 

@subsection environment_quality Code quality analysis 

For now only static analysis tools used. To use them, you shall export compile commands from CMake 

~~~
cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
~~~

Then, run one of the following targets, while keeping in mind that they can take sometime to execute: 

- **quality_codechecker_sensitive** : clang static analysis with limited inspection.
- **quality_codechecker_sensitive_ctu** : same with cross translation unit analysis.
- **quality_codechecker_extreme** : clang statis analysis with extensive inspection.
- **quality_codechecker_extreme_ctu** : same with cross translation unit analysis.
- **quality_cppcheck_default** : cppcheck with default search
- **quality_cppcheck_all** : cppcheck with all flag enabled 
- **quality_cppcheck_bug_hunting** : cppcheck with pessimistic report, can trigger a lot of false positives. 
- **quality_all** : all the above at once.

These commands generate HTML reports in ```quality/reports/``` directory, in a specific subdirectory.
For example, ```quality_cppcheck_all``` will report in ```quality/reports/cppcheck_all/```.

@section develomment_coding_conventions Coding conventions

To keep the code visually coherent and make it easier for maintainers to work on it in the future, please try to stick as much as possible with following style :

Try to be coherent with what already exists.

Any C/C++ code shall be formatted with the ```.clang-format``` at the root of the directory, which is LLVM style with few tweaks. 

All code has to be encased within ```ftg``` namespace, without any nesting.

Code shall aim to be expressive and concise. For example, getters and setters for ```T member``` shall be ```T member()``` and ```void member(T)```.

- ```UpperCamelCase``` is used for type-related entities : classes, templates type parameters, concepts, ...
- ```lowerCamelCase``` is used for everything else, especially value-like entities : variables, members, functions.
- An ```m_``` prefix is used for private (and eventually protected) members of classes, which allows naming their getter/setters with their non-private name.
- ```snake_case``` is used for checks in ```ftg::Test``` and derived classes.
- ```UPPER_UNDERSCORE_CASE``` is used for macros and some constants. But there should be no macro in code, unless they are absolutely needed for a relevant feature, as for example portability.
- C++ header files have a ```.hpp``` extension and C++ modules files have a ```.cpp``` extension. This allows to be more explicit about headers being C++.
- ```struct``` are used when members are all public, as for example for defining an interface, ```class``` is used otherwise. 

In addition, try to follow [C++ Core Guidelines](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines).

@section development_testing_and_arch Testing and architecture

Sources files, both headers and definitions, shall go into ```fatigue/``` directory. Headers have to be listed in the CMake file as headers of ```fatigue``` library.

A particular care has to be put into decoupling, especially between interface and applicative code, to allow flexibility and refined unit or integration testing. 

As an example, instead of 

~~~cpp
void runTest(){
    std::cout << ...;
}
~~~
one shall write

~~~cpp
void runTest(std::ostream& out){
    out << ...;
}
~~~

Behavior not involving IO shall be enforced with unit and integration testing as much as possible. System level testing is welcome, and is mandatory for behavior involving IO.

Tests shall be registered using CMake utility ```LLVMCoverage.cmake``` defined in submodule ```cmake_llvm_coverage```. 
and shall refer to sources as global includes ```#include <...>```, as if they were external to the project.

For now, code quality requirements are decided mostly by human review.  Additionally, when compiling with ```-Wall -Wextra```, no warning shall be triggered. Those flags are activated in all cmake build type, and ```Debug``` enables ```-Werror``` as well. Automated tools will be added later. Following C++ core guidelines should mostly be ok.

@section development_portability Portability and free software

- Try to avoid using external libraries, and when possible, use header-only ones.

- Avoid compiler-specific or platform-specific features.

- Only use free software and compatible with MIT license libraries.

- Every content added to the repository shall be possible to edit with reasonnable ease through use of a free software tool

- Prefer text-based file formats over binaries for contributions, as for example SVG for graphics, as they are easier for git to handle and keep repository light for people to download. 

- Any tool setup for code quality or other means of development shall be free software as well. On your side, you are free to use whatever tools you want if this use is not setup in the project.

- All files shall be licensed with the Reuse tool [https://reuse.software/](https://reuse.software/).

@section development_documentation Documentation 

Code shall be documented. Documentation is meant to be concise, and is **complementary** with code, to help making it easier to use and maintain.

Documentation incode is written using Doxygen comments ```/** */```. 

Additional documentation shall be put into ```.dox``` files in ```docs/doxinputs``` directory, and added to doxygen layout if needed.

Documentation shall document what is not trivial enough to understand by solely looking at the code with a reasonnable amount of effort. For example documentation of the following function (invented on purpose) : 

~~~{.cpp}
Docs write_documentation(bool sign);
~~~

does not need to tell that the function returns a newly written doc, however, some precisions on how the ```sign``` boolean affects created doc would be nice. 

Also, keep in mind that, as fatigue is open source and free software, users do have access to the code. Therefore, trivial-in-code behaviors do not require to be precisely documented. 

API targetted at end user shall be added to the @ref user_api "user api" group, using identifier ```user_api```. Those API components may eventually accept more documentation.

Finally, practical examples used in tutorials shall written as tests residing in ```tests/tutorial``` and then ```include``` into tutorial text.

@section develoment_other Other 

You are highly encouraged to inform me at [felix.bertoni987@gmail.com](mailto:felix.bertoni987@gmail.com) if you fork or intend to contribute to the project, 
so we can discuss about it. Please add ```[fatigue]``` at the start of the object of the mail.

Contributions are supposed to be forked from ```dev``` branch and merged back in it when done. All tests and full CI shall be passing before any code is eligible to merge. Please squash your history before submitting a merge request, in order to keep only important commits. Your branch history would ideally be as short as possible while keeping main decision you made and their rationales, as well as major struggles and caveats you encountered.

In case you are not sure about what you've done, or if you want to have feedback during while implementing, simply start a draft merge request.
*/